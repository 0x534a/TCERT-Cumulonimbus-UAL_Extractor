input
{
	file
	{
		path => [ "D:/Microsoft365-UnifiedAuditLog/*.json" ]
		start_position => "beginning"
	}
}

filter
{
	# The file isn't actual JSON, it's a bunch of different JSON on different lines. This way we split the file into individual JSON
	mutate
	{
		gsub => [ "message", "}{", "}
{" ]
	}
	split
	{
		field => "message"
	}
	
	# Now that we have actual JSON, we parse
	json
	{
		source => "message"
	}
	 
	# Because there's still nested structures in the JSON, we need to parse those seperately
	if ("" in [ExtendedProperties])
	{
		ruby
		{
			code => "event.get('ExtendedProperties').each { |kv| event.set('ExtendedProperties.' + kv['Name'], kv['Value']) }"
		}
	}
	if ("" in [Parameters] and [RecordType] == 1)
	{
		ruby
		{
			code => "event.get('Parameters').each { |kv| event.set('Parameters.' + kv['Name'], kv['Value']) }"
		}
	}
	
	# Because RecordType 2 contains a ModifiedProperties array, that isn't actually an array.. unlike modifiedproperties for other recordtypes.. Renaming this one, to prevent object mapping failures.
	if [RecordType] == 2
	{
		mutate
		{
			rename => { "ModifiedProperties" => "MailItemProperty" }
		}
	}
	 
	# Because RecordType 18 also has a Parameters field with different data structure, renaming field
	if [RecordType] == 18
	{
		mutate
		{
			add_field => { "CmdletParameters" => "%{[Parameters]}" }
		}
	}
	 
	# Sets the CreationTime to @Timestamp
	date
	{
		match => ["CreationTime", "ISO8601"]
		timezone => "UTC"
	}
	 
	# In certain cases, the ClientIP field consists of an IP adress written as [192.168.1.1]:48585 or 192.168.1.1:48585. This strips eventual brackets and portnumbers to prepare the field for GeoIP enrichment
	if (":" in [ClientIP])
	{
		grok
		{
			match => { "ClientIP"  => "%{IP:ClientIP}" }
			overwrite => [ "ClientIP" ]
		} 
	}
	if ([ClientIP] == "")
	{
		mutate
		{
			remove_field => [ "ClientIP" ]
		}
	}
	
	# RecordType 28 doesn't contain a ClientIP, but instead a SenderIp. 
	if ("" in [ClientIP])
	{
		geoip
		{
			source => ["ClientIP"]
		}
	}
	if ("" in [SenderIp]) 
	{
		geoip
		{
			source => ["SenderIp"]
		}
	}
	
	# If no parse failures occured, remove some fields for performance / storage reasons.
	if "_jsonparsefailure" not in [tags] 
	{
		mutate 
		{
			remove_field => [ "message" ]
			remove_field => [ "ExtendedProperties" ]
			remove_field => [ "ActorIpAddress" ]
			remove_field => [ "Parameters" ]
		}
	}		
}

output 
{
	elasticsearch 
	{
		hosts => ["http://localhost:9200"]
		index => "microsoft365-ual"
		template => "config\pipelines\Microsoft365.template"
		template_name => "microsoft365-ual"
		template_overwrite => true
	}
}